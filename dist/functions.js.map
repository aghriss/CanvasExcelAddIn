{"version":3,"file":"functions.js","mappings":"YAUA,SAASA,EAAIC,EAAOC,GAClB,OAAOD,EAAQC,CACjB,CASA,SAASC,EAAUC,EAAOC,GACxB,IAAIC,EAAM,sCAAwCD,EAG9CE,EAAS,CACXC,oBAAoB,EACpBC,QAAS,CACPC,cAAe,UAAYN,GAE7BO,OAAQ,OAKNC,EAFWC,YAAYC,MAAMR,EAAKC,GAElBQ,iBACpB,OAAOC,KAAKC,MAAML,EACpB,CAwBA,SAASM,EAAYd,EAAOe,EAAWC,EAAeC,GACpD,IAAIC,EAAQC,WACVpB,EAAUC,EAAO,WAAae,EAAY,gBAAkBC,EAAgB,gBAAkBC,GAAmB,OAEnH,OAAIG,MAAMF,GAAe,EAClBA,CACT,CAEAG,gBAAgBC,UAAU,MAAO1B,GACjCyB,gBAAgBC,UAAU,QAASR,GACnCO,gBAAgBC,UAAU,QA1B1B,SAAyBtB,GAIvB,OAFeD,EAAUC,EADV,cAGO,IACxB,IAuBAqB,gBAAgBC,UAAU,MAAO1B,GACjCyB,gBAAgBC,UAAU,cAAeR,E","sources":["webpack://excel-custom-functions-js/./src/functions/functions.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Add two numbers\n * @customfunction\n * @param {number} first First number\n * @param {number} second Second number\n * @returns {number} The sum of the two numbers.\n */\nfunction add(first, second) {\n  return first + second;\n}\n\n/**\n * Canvas API base\n * costumfunction\n * @param token {string}\n * @param endpoint {string}\n * @returns {json}\n */\nfunction canvasAPI(token, endpoint) {\n  var url = \"https://canvas.colorado.edu/api/v1/\" + endpoint;\n  //Logger.log(url);\n  //Logger.log(token);\n  var params = {\n    muteHttpExceptions: true,\n    headers: {\n      Authorization: \"Bearer \" + token,\n    },\n    method: \"GET\",\n  };\n  //Logger.log(params);\n  var response = UrlFetchApp.fetch(url, params);\n  //Logger.log(response);\n  var json = response.getContentText();\n  return JSON.parse(json);\n}\n\n/**\n https://officedev.github.io/Office-Add-in-samples/Excel-custom-functions/AzureFunction/CustomFunctionProject/f\n\n * @param token {string}\n * @returns {string}\n */\nfunction canvasTokenUser(token) {\n  let endpoint = \"users/self\";\n  let response = canvasAPI(token, endpoint);\n  //Logger.log(response);\n  return response[\"name\"];\n}\n\n/**\n * Get Grade\n * @customfunction\n * @param token {string}\n * @param course_id {number}\n * @param assignment_id {number}\n * @param student_id {number}\n * @returns {number}\n */\nfunction canvasGrade(token, course_id, assignment_id, student_id) {\n  let grade = parseFloat(\n    canvasAPI(token, \"courses/\" + course_id + \"/assignments/\" + assignment_id + \"/submissions/\" + student_id)[\"grade\"]\n  );\n  if (isNaN(grade)) return 0;\n  return grade;\n}\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"Grade\", canvasGrade);\nCustomFunctions.associate(\"Name\", canvasTokenUser);\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"CANVASGRADE\", canvasGrade);"],"names":["add","first","second","canvasAPI","token","endpoint","url","params","muteHttpExceptions","headers","Authorization","method","json","UrlFetchApp","fetch","getContentText","JSON","parse","canvasGrade","course_id","assignment_id","student_id","grade","parseFloat","isNaN","CustomFunctions","associate"],"sourceRoot":""}